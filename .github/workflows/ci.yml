name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25.1'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run tests with coverage
      run: go test -v -coverprofile=coverage.out ./...
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Run benchmarks
      run: go test -bench=. -benchmem ./...
    
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run staticcheck (if available)
      run: |
        if command -v staticcheck &> /dev/null; then
          staticcheck ./...
        else
          echo "staticcheck not available, skipping"
        fi

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Windows ARM64 builds are experimental
          - goos: windows
            goarch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME="labelstudio-to-yolo"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        # Add architecture to filename for multi-arch builds
        if [ "$GOARCH" = "arm64" ]; then
          BINARY_NAME="${BINARY_NAME%.*}_${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
        fi
        
        # Add OS to filename
        if [ "$GOOS" = "linux" ]; then
          BINARY_NAME="${BINARY_NAME%.*}_linux"
        elif [ "$GOOS" = "darwin" ]; then
          BINARY_NAME="${BINARY_NAME%.*}_darwin"
        fi
        
        # Restore .exe for Windows
        if [ "$GOOS" = "windows" ] && [[ ! "$BINARY_NAME" == *.exe ]]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        echo "Building ${BINARY_NAME} for ${GOOS}/${GOARCH}"
        go build -ldflags="-s -w" -o "${BINARY_NAME}" .
        
        # Verify the binary was created and is executable
        ls -la "${BINARY_NAME}"
        if [ "$GOOS" = "$(go env GOOS)" ] && [ "$GOARCH" = "$(go env GOARCH)" ]; then
          ./"${BINARY_NAME}" -help || echo "Binary help test completed"
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.goos }}-${{ matrix.goarch }}
        path: labelstudio-to-yolo*
        retention-days: 7
