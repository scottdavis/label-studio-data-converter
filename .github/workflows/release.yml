name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created]

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25.1'
    
    - name: Run tests
      run: go test -v ./...

  release:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          # Linux
          - goos: linux
            goarch: amd64
            suffix: _linux_amd64
          - goos: linux
            goarch: arm64
            suffix: _linux_arm64
          # Windows
          - goos: windows
            goarch: amd64
            suffix: _windows_amd64.exe
          # macOS
          - goos: darwin
            goarch: amd64
            suffix: _darwin_amd64
          - goos: darwin
            goarch: arm64
            suffix: _darwin_arm64
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Get version info
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        if [ -z "$VERSION" ] || [ "$VERSION" = "$GITHUB_REF" ]; then
          VERSION=$(git describe --tags --always --dirty)
        fi
        BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
        COMMIT=$(git rev-parse --short HEAD)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
        echo "commit=$COMMIT" >> $GITHUB_OUTPUT
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME="labelstudio-to-yolo${{ matrix.suffix }}"
        
        echo "Building ${BINARY_NAME} for ${GOOS}/${GOARCH}"
        
        go build \
          -ldflags="-s -w -X main.Version=${{ steps.version.outputs.version }} -X main.BuildTime=${{ steps.version.outputs.build_time }} -X main.Commit=${{ steps.version.outputs.commit }}" \
          -o "${BINARY_NAME}" .
        
        # Verify the binary
        ls -la "${BINARY_NAME}"
        
        # Test binary if same architecture
        if [ "$GOOS" = "$(go env GOOS)" ] && [ "$GOARCH" = "$(go env GOARCH)" ]; then
          ./"${BINARY_NAME}" -help || echo "Binary help test completed"
        fi
        
        # Create checksum
        if command -v sha256sum &> /dev/null; then
          sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
        elif command -v shasum &> /dev/null; then
          shasum -a 256 "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
        fi
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        files: |
          labelstudio-to-yolo*
        body: |
          ## Release ${{ steps.version.outputs.version }}
          
          ### Changes
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          
          ### Downloads
          
          Choose the appropriate binary for your system:
          
          | OS | Architecture | Download |
          |---|---|---|
          | Linux | x64 | `labelstudio-to-yolo_linux_amd64` |
          | Linux | ARM64 | `labelstudio-to-yolo_linux_arm64` |
          | Windows | x64 | `labelstudio-to-yolo_windows_amd64.exe` |
          | macOS | Intel | `labelstudio-to-yolo_darwin_amd64` |
          | macOS | Apple Silicon | `labelstudio-to-yolo_darwin_arm64` |
          
          ### Installation
          
          1. Download the appropriate binary for your system
          2. Make it executable (Linux/macOS): `chmod +x labelstudio-to-yolo_*`
          3. Run: `./labelstudio-to-yolo_* -help`
          
          ### Verification
          
          All binaries include SHA256 checksums for verification:
          ```bash
          # Linux/macOS
          sha256sum -c labelstudio-to-yolo_*.sha256
          
          # Windows PowerShell
          Get-FileHash labelstudio-to-yolo_windows_amd64.exe -Algorithm SHA256
          ```
          
          ### Build Info
          - **Version:** ${{ steps.version.outputs.version }}
          - **Build Time:** ${{ steps.version.outputs.build_time }}
          - **Commit:** ${{ steps.version.outputs.commit }}
          - **Go Version:** 1.21
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
